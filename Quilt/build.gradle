import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "org.quiltmc.loom" version "1.2.+"
    id 'maven-publish'
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${artifact_name}-Quilt"

repositories {
    maven {
        name 'Quilt (Release)'
        url 'https://maven.quiltmc.org/repository/release'
    }
    maven {
        name 'Quilt (Snapshot)'
        url 'https://maven.quiltmc.org/repository/snapshot'
        content {
            includeGroup 'org.quiltmc.fabric_api_qsl'
            includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
        }
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        url 'https://maven.terraformersmc.com/'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url "https://maven.shedaniel.me/" }
}

loom {
    accessWidenerPath = file("src/main/resources/bovinesandbuttercups.accesswidener")
    mixin {
        defaultRefmapName = "bovinesandbuttercups-refmap.json"
    }

    mods {
        register(mod_id) {
            sourceSet(sourceSets.main)
            sourceSet(sourceSets.test)
        }
    }
    runs {
        client {
            client()
            setConfigName("Quilt Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Quilt Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        test {
            client()
            source(sourceSets.test)
            setConfigName("Quilt Test")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"

    modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilt_stdlib_version}")

    modImplementation("com.terraformersmc:modmenu:${modmenu_version}") {
        exclude(group: "net.fabricmc")
    }

    include(modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}")) {
        exclude(group: "net.fabricmc")
    }
    include(modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}")) {
        exclude(group: "net.fabricmc")
    }

    include(modApi(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${mixin_extras_version}")))

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compileOnly group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'
    annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'

    implementation(project(":Common"))

    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}") { transitive false }
    modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}") { transitive false }

    // modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}") { transitive false }
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}") { transitive false }
    modCompileOnly("dev.architectury:architectury-fabric:${architectury_version}") { transitive false }
    modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") { transitive false }

    /*
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}") {
        exclude module: 'dev.architectury'
    }
    modRuntimeOnly "dev.architectury:architectury-fabric:${architectury_version}"
     */

    modCompileOnly("dev.emi:emi-fabric:${emi_version}:api") { transitive false }
    // modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    modCompileOnly("maven.modrinth:inspecio:${inspecio_version}") { transitive false }
}

processResources {
    from project(":Common").sourceSets.main.resources

    exclude("bovinesandbuttercups-common.accesswidener")

    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "version": project.version
    }
}

processTestResources {
    outputs.upToDateWhen { false }
    from project(":Common").sourceSets.test.resources
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            name = "merchantpug"
            url = "https://maven.merchantpug.net/releases"
            credentials(PasswordCredentials)
            authentication {
                create("basic", BasicAuthentication)
            }
        }
    }
}


tasks.register('curseforge', TaskPublishCurseForge) {
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(cf_project_id, remapJar)
    mainFile.displayName = "Quilt v${rootProject.version}"
    mainFile.releaseType = "release"
    mainFile.changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    mainFile.changelogType = "markdown"
    mainFile.addModLoader('Quilt')
    java_versions.split(", ").each {
        mainFile.addJavaVersion(it)
    }

    quilt_game_versions.split(", ").each {
        mainFile.addGameVersion(it)
    }

    quilt_required_deps.split(", ").each {
        mainFile.addRequirement(it)
    }

    common_optional_deps.split(", ").each {
        mainFile.addOptional(it)
    }

    cf_common_optional_deps.split(", ").each {
        mainFile.addOptional(it)
    }

    quilt_optional_deps.split(", ").each {
        mainFile.addOptional(it)
    }

    cf_quilt_embedded_deps.split(", ").each { String project ->
        mainFile.addEmbedded(it)
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = mr_project_id
    versionNumber = "${project.version}-quilt"
    versionType = "release"
    versionName = "Quilt v$project.version"
    changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    uploadFile = remapJar
    gameVersions = quilt_game_versions.split(", ").toList()
    loaders = [ "quilt" ]
    dependencies {
        quilt_required_deps.split(", ").each { String project ->
            required.project project
        }

        common_optional_deps.split(", ").each { String project ->
            optional.project project
        }

        mr_common_optional_deps.split(", ").each { String project ->
            optional.project project
        }

        quilt_optional_deps.split(", ").each { String project ->
            optional.project project
        }

        mr_quilt_embedded_deps.split(", ").each { String project ->
            embedded.project project
        }
    }
}