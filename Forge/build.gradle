import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${artifact_name}-Forge"

mixin {
    add sourceSets.main, "${project.mod_id}-refmap.json"

    config "${project.mod_id}.mixins.json"
    config "${project.mod_id}.forge.mixins.json"
}

jarJar.enable()

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.test"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${project.mod_id}.mixins.json", "-mixin.config=${project.mod_id}.forge.mixins.json"
            mods {
                create(mod_id) {
                    source sourceSets.main
                    source sourceSets.test
                    source project(":Common").sourceSets.main
                    source project(":Common").sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.test"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${project.mod_id}.mixins.json", "-mixin.config=${project.mod_id}.forge.mixins.json"
            mods {
                create(mod_id) {
                    source sourceSets.main
                    source sourceSets.test
                    source project(":Common").sourceSets.main
                    source project(":Common").sourceSets.test
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        url 'https://jitpack.io'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url 'https://maven.terraformersmc.com/'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'
    annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}") {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // TODO: For some odd reason the below two lines are necessary to compile, feel free to PR an easier method if you know one.
    testCompileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    testCompileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))

    // runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // TODO: Use REI API jar once https://github.com/shedaniel/RoughlyEnoughItems/issues/1194 is fixed.
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
    compileOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    /*
    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
    runtimeOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
     */

    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}:api")
    // TODO: For some odd reason the below line is necessary to compile, feel free to PR an easier method if you know one.
    testCompileOnly(fg.deobf("dev.emi:emi-forge:${emi_version}:api"))
    // runtimeOnly fg.deobf("dev.emi:emi-forge:${emi_version}")
}

jar {
    manifest {
        attributes(
                "Implementation-Version": "${project.version}-forge"
        )
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    filesMatching('*.mixins.json') {
        expand "refmap_target": "${project.mod_id}."
    }
    exclude("bovinesandbuttercups-common.accesswidener")
}

processTestResources {
    outputs.upToDateWhen { false }
    from project(":Common").sourceSets.test.resources
}

tasks.jarJar.configure {
    archiveClassifier = ""
    dependsOn('reobfJar')
}

jar.finalizedBy('jarJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jarJar
        }
    }

    repositories {
        maven {
            name = "merchantpug"
            url = "https://maven.merchantpug.net/releases"
            credentials(PasswordCredentials)
            authentication {
                create("basic", BasicAuthentication)
            }
        }
    }
}

tasks.register('curseforge', TaskPublishCurseForge) {
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(cf_project_id, jar)
    mainFile.displayName = "Forge v${rootProject.version}+${minecraft_version}"
    mainFile.releaseType = "release"
    mainFile.changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    mainFile.changelogType = "markdown"
    mainFile.addModLoader('Forge')
    forge_game_versions.split(", ").each {
        mainFile.addGameVersion(it)
    }
    java_versions.split(", ").each {
        mainFile.addJavaVersion(it)
    }
    common_optional_deps.split(", ").each {
        mainFile.addOptional(it)
    }
    cf_common_optional_deps.split(", ").each {
        mainFile.addOptional(it)
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = mr_project_id
    versionNumber = "${project.version}-forge"
    versionType = "release"
    versionName = "Forge v$project.version"
    changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    uploadFile = jar
    gameVersions = forge_game_versions.split(", ").toList()
    loaders = [ "forge" ]
    dependencies {
        common_optional_deps.split(", ").each {
            optional.project it
        }
        mr_common_optional_deps.split(", ").each {
            optional.project it
        }
    }
}