buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${artifact_name}-Forge"

configurations {
    library
    shade
    implementation.extendsFrom(shade)
}

// Used to manually add non-mc libraries to the runtime classpaths found in build/classpath
// If you have any module issues, check these files to make sure there are no duplicate dependencies
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

mixin {
    add sourceSets.main, "${project.mod_id}-refmap.json"

    config "${project.mod_id}.mixins.json"
    config "${project.mod_id}.forge.mixins.json"
}

jarJar.enable()

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${project.mod_id}.mixins.json", "-mixin.config=${project.mod_id}.forge.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${project.mod_id}.mixins.json", "-mixin.config=${project.mod_id}.forge.mixins.json"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        url 'https://jitpack.io'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'
    annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'

    jarJar(group: 'com.github.LlamaLad7', name: 'MixinExtras', version: "[${mixin_extras_version},0.2.0)") {
        jarJar.pin(it, mixin_extras_version)
    }
    minecraftLibrary "com.github.LlamaLad7:MixinExtras:${mixin_extras_version}"
    annotationProcessor "com.github.LlamaLad7:MixinExtras:${mixin_extras_version}"

    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // TODO: For some odd reason the below two lines are necessary to compile, feel free to PR an easier method if you know one.
    testCompileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    testCompileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))

    // runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // TODO: Use REI API jar once https://github.com/shedaniel/RoughlyEnoughItems/issues/1194 is fixed.
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
    compileOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    /*
    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
    runtimeOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    */
}

jar {
    manifest {
        attributes(
                "Implementation-Version": "${project.version}-forge"
        )
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    filesMatching('*.mixins.json') {
        expand "refmap_target": "${project.mod_id}."
    }
    exclude("bovinesandbuttercups-common.accesswidener")

    def environment = System.getenv("ENVIRONMENT")
    if (environment != "production") {
        from(rootProject.rootDir.absolutePath + "/testdata") { into 'data' }
        from(rootProject.rootDir.absolutePath + "/testassets") { into 'assets'}
    }
}

shadowJar {
    configurations = [project.configurations.shade]

    classifier ''
    relocate 'com.llamalad7', 'net.merchantpug.shadowed.com.llamalad7'

    finalizedBy 'reobfShadowJar'
    mergeServiceFiles()
}

reobf {
    shadowJar {}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jarJar
        }
    }

    repositories {
        maven {
            name = "merchantpug"
            url = "https://maven.merchantpug.net/releases"
            credentials(PasswordCredentials)
            authentication {
                create("basic", BasicAuthentication)
            }
        }
    }
}


curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN")
    if (apiKey == null) return
    project {
        id = cf_project_id
        changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
        changelogType = 'markdown'
        releaseType = 'release'

        addGameVersion 'Forge'
        cf_java_versions.split(", ").each { String gameVersion ->
            addGameVersion gameVersion
        }
        forge_game_versions.split(", ").each { String gameVersion ->
            addGameVersion gameVersion
        }

        mainArtifact(jarJar) {
            displayName = "Forge v$project.version"
            relations {
                common_optional_deps.split(", ").each { String project ->
                    optionalDependency project
                }

                cf_common_optional_deps.split(", ").each { String project ->
                    optionalDependency project
                }
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = mr_project_id
    versionNumber = "${project.version}-forge"
    versionType = "release"
    versionName = "Forge v$project.version"
    changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    uploadFile = jarJar
    gameVersions = forge_game_versions.split(", ").toList()
    loaders = [ "forge" ]
    dependencies {
        common_optional_deps.split(", ").each { String project ->
            optional.project project
        }

        mr_common_optional_deps.split(", ").each { String project ->
            optional.project project
        }
    }
}