buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

archivesBaseName = "${project.mod_name}-Forge"

mixin {
    add sourceSets.main, "${project.mod_id}.refmap.json"

    config "${project.mod_id}.mixins.json"
    config "${project.mod_id}-forge.mixins.json"
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${project.mod_id}.mixins.json", "-mixin.config=${project.mod_id}-forge.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${project.mod_id}.mixins.json", "-mixin.config=${project.mod_id}-forge.mixins.json"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${project.mod_id}.mixins.json", "-mixin.config=${project.mod_id}-forge.mixins.json"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Xplat").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Xplat")
    annotationProcessor 'org.spongepowered:mixin:0.8.4-SNAPSHOT:processor'
}

tasks.withType(JavaCompile) {
    source(project(":Xplat").sourceSets.main.allSource)
}

processResources {
    from project(":Xplat").sourceSets.main.resources
    filesMatching('*.mixins.json') {
        expand "refmap_target": "${project.mod_id}."
    }

    def environment = System.getenv("ENVIRONMENT")
    if (environment != "production") {
        from(rootProject.rootDir.absolutePath + "/testdata") { into 'data' }
        from(rootProject.rootDir.absolutePath + "/testassets") { into 'assets'}
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
